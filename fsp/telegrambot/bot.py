import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from asgiref.sync import sync_to_async
from price.services import sber_service

logger = logging.getLogger('telegrambot')


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    welcome_msg = (
        "üè¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–π –æ—Ü–µ–Ω–∫–∏ –∞–∫—Ü–∏–π –°–±–µ—Ä–±–∞–Ω–∫–∞!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/info - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
        "/history - –∫—Ä–∞—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )
    await update.message.reply_text(welcome_msg)
    await send_current_info(update, context)


async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /info command"""
    await send_current_info(update, context)


async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /history command"""
    try:
        # Use sync_to_async to call Django ORM methods
        get_historical_data = sync_to_async(sber_service.get_historical_data)
        snapshots = await get_historical_data(days=7)
        
        # Convert QuerySet to list to avoid async issues
        snapshots_list = await sync_to_async(list)(snapshots)
        
        if not snapshots_list:
            await update.message.reply_text("üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        
        msg = "üìà –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
        for snapshot in snapshots_list[:5]:  # Show last 5 entries
            date_str = snapshot.timestamp.strftime('%d.%m %H:%M')
            msg += (
                f"üìÖ {date_str}\n"
                f"üí∞ MOEX: {snapshot.moex_price or '–ù/–î'} ‚ÇΩ\n"
                f"‚öñÔ∏è –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è: {snapshot.fair_price or '–ù/–î'} ‚ÇΩ\n"
                f"üìä P/B: {snapshot.pb_ratio or '–ù/–î'}\n"
                f"üéØ –û—Ü–µ–Ω–∫–∞: {snapshot.price_score}\n\n"
            )
        
        await update.message.reply_text(msg)
        
    except Exception as e:
        logger.error(f"Error in history command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command"""
    help_msg = (
        "ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:\n\n"
        "üìä /info - —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏–∏\n"
        "üìà /history - –∏—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏\n"
        "‚ùì /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
        "‚è∞ –ö–µ—à: 1 –º–∏–Ω—É—Ç–∞ –≤ —Ç–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã, 5 –º–∏–Ω—É—Ç –≤ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è\n\n"
        "üìù –û—Ü–µ–Ω–∫–∏:\n"
        "üü¢ –¥–µ—à–µ–≤–æ - P/B < 1.0\n"
        "üîµ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ - P/B 1.0-1.2\n"
        "üü° —á—É—Ç—å –¥–æ—Ä–æ–≥–æ - P/B 1.2-1.4\n"
        "üî¥ –¥–æ—Ä–æ–≥–æ - P/B > 1.4"
    )
    await update.message.reply_text(help_msg)


async def send_current_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send current price information"""
    try:
        # Send "typing" action
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        
        # Use sync_to_async to call Django service methods
        get_current_data = sync_to_async(sber_service.get_current_data)
        data = await get_current_data()
        
        # Check if we have valid data
        if data['moex_price'] is None or data['fair_price'] is None:
            await update.message.reply_text(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, –±–∏—Ä–∂–∞ –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API."
            )
            return
        
        # Format price score with emoji
        score_emoji = {
            '–¥–µ—à–µ–≤–æ': 'üü¢',
            '—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ': 'üîµ', 
            '—á—É—Ç—å –¥–æ—Ä–æ–≥–æ': 'üü°',
            '–¥–æ—Ä–æ–≥–æ': 'üî¥'
        }
        
        emoji = score_emoji.get(data['price_score'], '‚ö™')
        
        msg = (
            f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ –∞–∫—Ü–∏–∏ –°–±–µ—Ä–±–∞–Ω–∫–∞:\n\n"
            f"üí∞ MOEX —Ü–µ–Ω–∞: {data['moex_price']} ‚ÇΩ\n"
            f"‚öñÔ∏è –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è —Ü–µ–Ω–∞: {data['fair_price']} ‚ÇΩ\n"
            f"üìà –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è +20%: {data['fair_price_20_percent']} ‚ÇΩ\n"
            f"üìä P/B –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {data['pb_ratio']}\n"
            f"{emoji} –û—Ü–µ–Ω–∫–∞: {data['price_score']}\n\n"
            f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['timestamp'].strftime('%d.%m.%Y %H:%M')}"
        )
        
        await update.message.reply_text(msg)
        logger.info(f"Sent price info to user {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"Error sending current info: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


async def handle_unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle unknown commands"""
    await update.message.reply_text(
        "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors"""
    logger.error(f"Update {update} caused error {context.error}")
    
    if update and update.message:
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–æ–±–ª–µ–º–µ."
        )


def run_bot():
    """Run the Telegram bot"""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        raise RuntimeError("TELEGRAM_BOT_TOKEN environment variable is not set!")
    
    # Create application
    app = ApplicationBuilder().token(token).build()
    
    # Add command handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("history", history))
    app.add_handler(CommandHandler("help", help_command))
    
    # Handle unknown commands
    app.add_handler(MessageHandler(filters.COMMAND, handle_unknown))
    
    # Add error handler
    app.add_error_handler(error_handler)
    
    logger.info("Starting Telegram bot...")
    
    # Run the bot
    app.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )
