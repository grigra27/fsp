name: Deploy to DigitalOcean

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_WEB: grigra27/fair_sber_price-web
  IMAGE_NAME_BOT: grigra27/fair_sber_price-bot

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd fsp
        pip install -r requirements.txt
        pip install -r requirements-prod.txt
    
    - name: Run Django checks
      run: |
        cd fsp
        python manage.py check
      env:
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
        ALLOWED_HOSTS: localhost
        TELEGRAM_BOT_TOKEN: test-token

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for web image
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata for bot image
      id: meta-bot
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BOT }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.web
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
    
    - name: Build and push bot image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.bot
        push: true
        tags: ${{ steps.meta-bot.outputs.tags }}
        labels: ${{ steps.meta-bot.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Auto-setup and Deploy to DigitalOcean
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: ${{ secrets.DO_PORT }}
        passphrase: ${{ secrets.DO_SSH_PASSPHRASE }}
        script: |
          # Auto-setup server if needed
          echo "🚀 Starting auto-deployment..."
          
          # Install Docker Compose if not present
          if ! command -v docker-compose &> /dev/null; then
            echo "📦 Installing Docker Compose..."
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          fi
          
          # Create application directory
          mkdir -p /opt/fair-sber-price
          cd /opt/fair-sber-price
          
          # Create logs directory with proper permissions
          mkdir -p fsp/logs fsp/staticfiles
          chmod 755 fsp/logs fsp/staticfiles
          chown -R 1000:1000 fsp/logs fsp/staticfiles || true
          
          # Create database file if it doesn't exist
          if [ ! -f "fsp/db.sqlite3" ]; then
            touch fsp/db.sqlite3
          fi
          chmod 664 fsp/db.sqlite3
          
          # Set proper ownership (UID 1000 matches django user in container)
          chown -R 1000:1000 fsp/ || true
          
          # Create environment file
          cat > .env << EOF
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DEBUG=False
          ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          REDIS_URL=redis://redis:6379/0
          POSTGRES_DB=${{ secrets.POSTGRES_DB || 'fsp_db' }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER || 'fsp_user' }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD || 'fsp_password' }}
          POSTGRES_HOST=postgres
          POSTGRES_PORT=5432
          DATABASE_URL=postgres
          EOF
          
          # Copy updated docker-compose.prod.yml from repository
          cat > docker-compose.prod.yml << 'COMPOSE_EOF'
          version: '3.8'
          
          services:
            # PostgreSQL database
            postgres:
              image: postgres:15-alpine
              container_name: fsp_postgres
              restart: unless-stopped
              environment:
                - POSTGRES_DB=${POSTGRES_DB:-fsp_db}
                - POSTGRES_USER=${POSTGRES_USER:-fsp_user}
                - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-fsp_password}
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - fsp_network
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fsp_user} -d ${POSTGRES_DB:-fsp_db}"]
                interval: 10s
                timeout: 5s
                retries: 5
          
            # Redis cache service
            redis:
              image: redis:7-alpine
              container_name: fsp_redis
              restart: unless-stopped
              volumes:
                - redis_data:/data
              networks:
                - fsp_network
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 30s
                timeout: 10s
                retries: 3
          
            # Django web application
            web:
              image: ghcr.io/grigra27/fair_sber_price-web:latest
              container_name: fsp_web
              restart: unless-stopped
              ports:
                - "8000:8000"
              environment:
                - SECRET_KEY=${SECRET_KEY}
                - DEBUG=False
                - ALLOWED_HOSTS=${ALLOWED_HOSTS}
                - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
                - REDIS_URL=redis://redis:6379/0
                - DJANGO_SETTINGS_MODULE=fsp.production
                - DATABASE_URL=postgres
                - POSTGRES_DB=${POSTGRES_DB:-fsp_db}
                - POSTGRES_USER=${POSTGRES_USER:-fsp_user}
                - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-fsp_password}
                - POSTGRES_HOST=postgres
                - POSTGRES_PORT=5432
              depends_on:
                postgres:
                  condition: service_healthy
                redis:
                  condition: service_healthy
              volumes:
                - ./fsp/logs:/app/logs
                - static_files:/app/staticfiles
              networks:
                - fsp_network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          
            # Telegram bot service
            telegram-bot:
              image: ghcr.io/grigra27/fair_sber_price-bot:latest
              container_name: fsp_telegram_bot
              user: "1000:1000"
              restart: unless-stopped
              environment:
                - SECRET_KEY=${SECRET_KEY}
                - DEBUG=False
                - ALLOWED_HOSTS=${ALLOWED_HOSTS}
                - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
                - REDIS_URL=redis://redis:6379/0
                - DJANGO_SETTINGS_MODULE=fsp.production
                - DATABASE_URL=postgres
                - POSTGRES_DB=${POSTGRES_DB:-fsp_db}
                - POSTGRES_USER=${POSTGRES_USER:-fsp_user}
                - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-fsp_password}
                - POSTGRES_HOST=postgres
                - POSTGRES_PORT=5432
              depends_on:
                postgres:
                  condition: service_healthy
                web:
                  condition: service_healthy
                redis:
                  condition: service_healthy
              volumes:
                - ./fsp/logs:/app/logs
              networks:
                - fsp_network
              healthcheck:
                test: ["CMD", "python", "-c", "import os; exit(0 if os.getenv('TELEGRAM_BOT_TOKEN') else 1)"]
                interval: 60s
                timeout: 10s
                retries: 3
                start_period: 30s
          
            # Nginx reverse proxy
            nginx:
              image: nginx:alpine
              container_name: fsp_nginx
              restart: unless-stopped
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - ./nginx.conf:/etc/nginx/nginx.conf:ro
                - static_files:/var/www/static:ro
                - ./ssl_copy:/etc/nginx/ssl:ro
              depends_on:
                web:
                  condition: service_healthy
              networks:
                - fsp_network
          
          volumes:
            postgres_data:
            redis_data:
            static_files:
          
          networks:
            fsp_network:
              driver: bridge
          COMPOSE_EOF
          
          # Setup firewall if ufw is available
          if command -v ufw &> /dev/null; then
            ufw allow 22/tcp 2>/dev/null || true
            ufw allow 8000/tcp 2>/dev/null || true
            ufw --force enable 2>/dev/null || true
          fi
          
          # Create systemd service for auto-restart
          cat > /etc/systemd/system/fair-sber-price.service << 'SERVICE_EOF'
          [Unit]
          Description=Fair Sber Price Application
          Requires=docker.service
          After=docker.service
          
          [Service]
          Type=oneshot
          RemainAfterExit=yes
          WorkingDirectory=/opt/fair-sber-price
          ExecStart=/usr/local/bin/docker-compose -f docker-compose.prod.yml up -d
          ExecStop=/usr/local/bin/docker-compose -f docker-compose.prod.yml down
          TimeoutStartSec=0
          
          [Install]
          WantedBy=multi-user.target
          SERVICE_EOF
          
          systemctl daemon-reload
          systemctl enable fair-sber-price.service
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest images
          echo "📥 Pulling latest Docker images..."
          docker pull ghcr.io/grigra27/fair_sber_price-web:latest
          docker pull ghcr.io/grigra27/fair_sber_price-bot:latest
          
          # Stop old containers
          echo "🛑 Stopping old containers..."
          docker-compose -f docker-compose.prod.yml down || true
          
          # Start new containers
          echo "🚀 Starting new containers..."
          docker-compose -f docker-compose.prod.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          # Wait for services to start
          echo "⏳ Waiting for services to start..."
          sleep 45
          
          # Check deployment status
          echo "📊 Checking deployment status..."
          docker-compose -f docker-compose.prod.yml ps
          
          # Test health endpoint
          echo "🏥 Testing health endpoint..."
          for i in {1..10}; do
            if curl -f http://localhost:8000/api/health/ 2>/dev/null; then
              echo "✅ Health check passed!"
              break
            else
              echo "⏳ Attempt $i/10 failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          echo "🎉 Deployment completed!"
          echo "🌐 Your application should be available at: http://${{ secrets.DO_HOST }}:8000"