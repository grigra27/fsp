name: Deploy to DigitalOcean

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_WEB: grigra27/fair_sber_price-web
  IMAGE_NAME_BOT: grigra27/fair_sber_price-bot

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd fsp
        pip install -r requirements.txt
        pip install -r requirements-prod.txt
    
    - name: Run Django checks
      run: |
        cd fsp
        python manage.py check
      env:
        SECRET_KEY: test-secret-key-for-ci
        DEBUG: False
        ALLOWED_HOSTS: localhost
        TELEGRAM_BOT_TOKEN: test-token

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata for web image
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Extract metadata for bot image
      id: meta-bot
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BOT }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.web
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
    
    - name: Build and push bot image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.bot
        push: true
        tags: ${{ steps.meta-bot.outputs.tags }}
        labels: ${{ steps.meta-bot.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USERNAME }}
        key: ${{ secrets.DO_SSH_KEY }}
        port: ${{ secrets.DO_PORT }}
        script: |
          cd /opt/fair-sber-price
          
          # Pull latest code
          git pull origin main
          
          # Update environment variables
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
          echo "DEBUG=False" >> .env
          echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> .env
          echo "REDIS_URL=redis://redis:6379/0" >> .env
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull latest images
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEB }}:latest
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BOT }}:latest
          
          # Stop and remove old containers
          docker-compose -f docker-compose.prod.yml down
          
          # Start new containers
          docker-compose -f docker-compose.prod.yml up -d
          
          # Clean up old images
          docker image prune -f
          
          # Check deployment status
          sleep 30
          docker-compose -f docker-compose.prod.yml ps
          
          # Test health endpoint
          curl -f http://localhost/api/health/ || exit 1